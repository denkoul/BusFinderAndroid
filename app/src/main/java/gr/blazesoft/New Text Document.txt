package gr.blazesoft.busfinder;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.support.v4.app.FragmentActivity;
import android.os.Bundle;
import android.text.InputType;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;


import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;


import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;


public class Subscriber extends FragmentActivity implements OnMapReadyCallback, View.OnClickListener {


    private GoogleMap mMap;
    private Button mButton;
    private EditText TextBoxBusline;

    private String brokerIP;

    public String subscriberID, topic;
    public ObjectOutputStream brokerOut;
    public volatile Broker currentBroker;
    public static volatile boolean stopDownload = false;

    private ArrayList<BusLine> currentVehicles = new ArrayList<>();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        subscriberID = "1";
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_maps);
        // Obtain the SupportMapFragment and get notified when the map is ready to be used.
        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
                .findFragmentById(R.id.map);
        mapFragment.getMapAsync(this);

        mButton = findViewById(R.id.button);
        mButton.setOnClickListener(this);

        TextBoxBusline = findViewById(R.id.busLineID);


        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Enter Broker IP");

// Set up the input
        final EditText input = new EditText(this);
// Specify the type of input expected; this, for example, sets the input as a password, and will mask the text
        input.setInputType(InputType.TYPE_CLASS_TEXT);
        builder.setView(input);

// Set up the buttons
        builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                brokerIP = input.getText().toString();
            }
        });
        builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.cancel();
            }
        });

        builder.show();

    }



    /**
     * Manipulates the map once available.
     * This callback is triggered when the map is ready to be used.
     * This is where we can add markers or lines, add listeners or move the camera. In this case,
     * we just add a marker near Sydney, Australia.
     * If Google Play services is not installed on the device, the user will be prompted to install
     * it inside the SupportMapFragment. This method will only be triggered once the user has
     * installed Google Play services and returned to the app.
     */
    @Override
    public void onMapReady(GoogleMap googleMap) {
        mMap = googleMap;
        // Add a marker in Sydney and move the camera

    }

    public void disconnect (String ip, int port)
    {
        Utils.sendPacket(this,ip,port,"remove_me");
    }

    public void register(String ip, int port, String topic) {

        this.topic = topic;
        Socket requestSocket = null;
        ObjectOutputStream out = null;
        ObjectInputStream in = null;
        try
        {
            requestSocket = new Socket(ip,port);
            out = new ObjectOutputStream(requestSocket.getOutputStream());
            in = new ObjectInputStream(requestSocket.getInputStream());

            out.writeUTF("i_want_bus");
            out.flush();



            out.reset();
            out.writeUnshared(this);
            out.flush();

            String returned = in.readUTF();
            if (returned.equals("bus_is_here"))
            {
                currentBroker = (Broker) in.readObject();
                ArrayList<Bus> ret = (ArrayList<Bus>) in.readObject();
                visualizeData(ret);


                while (!stopDownload) {
                    ret = (ArrayList<Bus>) in.readObject();
                    visualizeData(ret);
                }

            }
            else if (returned.equals("bus_not_here"))
            {
                System.out.println("Line not found in broker 1");
                ArrayList<Broker> brokers = (ArrayList<Broker>) in.readObject();

                for(Broker b: brokers)
                {
                    if( b.containsTopic(topic) != null )
                    {
                        System.out.println(b.IP + " has your data.");
                        register(b.IP, b.port,topic);
                    }
                }
            }
        } catch (UnknownHostException unknownHost) {
            System.err.println("You are trying to connect to an unknown host!");
        } catch (IOException ioException) {
            ioException.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } finally {
            try {
                in.close();
                out.close();
                requestSocket.close();
            } catch (IOException ioException) {
                ioException.printStackTrace();
            }
        }
    }

    public void visualizeData(ArrayList<Bus> ret)
    {
        for (Bus b : ret)
        {
            LatLng bus = new LatLng(b.lat,b.lon);
            mMap.addMarker(new MarkerOptions().position(bus).title(b.LineCode + " " + b.vehicleId));
        }
    }

    @Override
    public void onClick(View view)
    {


        register(brokerIP,8080,TextBoxBusline.getText().toString());
        /*
        LatLng sydney = new LatLng(Double.parseDouble( textBox.getText().toString()), Double.parseDouble( textBox.getText().toString()));
        mMap.addMarker(new MarkerOptions().position(sydney).title(""));
        mMap.moveCamera(CameraUpdateFactory.newLatLng(sydney));

        */
    }

}
